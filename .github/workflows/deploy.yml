env:
  PROJECT_NAME: mmz

name: DEV Deploy

  
on:   # push 되거나 pull request 혹은 수동실행 옵션 추가
  push: 
    branches: [dev, main] 
  pull_request:
    branches: [dev]
  workflow_dispatch: # Actions 내부적 따로 실행 가능한 옵션 추가
  
jobs:
  build: 
    runs-on: ubuntu-latest # 우분투 22.04 버전으로 실행됨 
    permissions: 
      contents: read 
      packages: write  

    steps:
    - name: Checkout 
      uses: actions/checkout@v3   #반드시 시작하기전에 체크아웃 진행해야지만, 정상적으로 리포지토리가 연결됨
      
    - name: Set up JDK 11 
      uses: actions/setup-java@v3 
      with:
        java-version: '11' 
        distribution: 'temurin' 
        
    - name: Server Build 
      run: |                          # 개별 실행 옵션, 없으면 39 ~ 44줄까지 모두 한줄에 실행됨
        mkdir -p app/server/          # 압축할 임시 폴더 생성 (app/server)
        cd server/                    # 리포지토리에서 server 폴더로 이동
        chmod +x ./gradlew            # GitHub Action 에서 gradle build를 위한 권한설정
        ./gradlew clean build -x test # 테스트를 제외한 빌드 진행, 테스트를 원하면 -x test 옵션 삭제
        cd ..                         # 리포지토리 기본 위치로 이동
        cp server/build/libs/*.jar app/server/  # jar 파일 임시 폴더로 복사
      shell: bash
      
    
    - name: Client Build
#       continue-on-error: true          # client 폴더 미생성으로 임시 에러 발생 
      run : |                          # 개별 실행 옵션
        mkdir -p app/client            # 압축할 임시 폴더 생성 (app/client)
        cd client/                     # 리포지토리에서 client 폴더로 이동
        npm install                  # 클라이언트 빌드를 위해 install 실행 , 테스트를 진행하려면 아랫줄에 npm test 추가
        npm run build                  # 클라이언트 빌드
        cd ..                          # 리포지토리 기본 위치로 이동
        cp -r client/build/ app/client # build 폴더 전체 임시 폴더로 복사
      shell: bash
       
        
    - name: Make zip file
      run: 
         zip -r deploy.zip ./app      # 임시 폴더 전체 deploy.zip 폴더로 
      shell: bash
        
    # 해당 리포지토리 기본위치에서 데이터(source)를 원격 위치(target)으로 이동시킴
    - name: SSH Deploy
      uses: easingthemes/ssh-deploy@v2.2.11
      with:
        SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }} # ssh private key, ssh-keygen -m PEM -t rsa -b 4096 해당 키젠으로 만들어야하며 
                                                       # .ssh 폴더에 해당 키젠으로 제작된 pub 파일이 authorized_keys에 복사가 되어있어야함.
        REMOTE_HOST: ${{ secrets.SERVER_HOST }}        # 복사하려는 엔드포인트
        REMOTE_USER: ${{ secrets.SERVER_USER_NAME }}   # 해당 서버의 계정 이름
        REMOTE_PORT: ${{ secrets.SERVER_PORT }}        # 해당 서버의 ssh 포트
        SOURCE: deploy.zip
        TARGET: /home/ward/
        
    # SSH 원격 실행
    - name: Deploy init
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER_NAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: sh deploy-init.sh
          
          
    - name: UnZip and remove old deploy files
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER_NAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: sh deploy-zip.sh

          
          
    - name: Execute mmz jar
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER_NAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: sh deploy-excute.sh
